Conflict_Warnings
===============

Description
============

Named after the HTTP 409 Conflict Status Conflict_Warnings is used to notify
users that their requests cannot be performed because they are acting on old
data in the database.

Provides tools to warn end users about actions which may cause undesired
results. This plugin was primarily written to deal with race conditions, caused
by multiple users editing the same records.

I wrote this in tandem with my acts_as_touchable plugin to allow simple conflict
detection in parent-child relationships.  However my acts_as_touchable plugin
has been obsoleted by Rails 2.3.3's touch. Which will do in a pinch.

Using Conflict_Warnings is a two step process.

Step one: Embed a timestamp paramaters in potentially dangerous links.
This is done with the link_to_with_timestamp helper from your views.

Step two: Catch undesireable timestamps
The catch_warnings filter identifies these problem cases allowing you to display
relevant errors and warnings and/or more importantly update information.

See the catch_conflicts section for more details.



Requirements
==============

For default behaviour an updated_at or updated_on timestamp column is needed on
any model Conflict_Warnings has to guess at.


Installation
=============

From the root of your rails project run the following command:
./script/plugin install git://github.com/EmFi/conflict_warnings.git


Usage
=====

link_to_with_timestamp
----------------------

Wrapper for link_to that adds a page_rendered_at=DateTime.now paramater to the
target url.


link_to_remote_with_timestamp
-----------------------------

Wrapper for link_to remote that adds a page_rendered_at=DateTime.now parameter
to the target url.


link_to_remote_with_timestamp_and_fallback
------------------------------------------

Wrapper for link_to_remote_with_timestamp that sets the html_options argument
to link_to_with_timestamp. Allowing for AJAX conflict warnings that successfully
fall back go html requests.


catch_warnings options = {}, &block
------------------------------------

catch_warnings adds a before_filter call to a controller class.

Without any arguments, catch_warnings will guess at the information it needs to
to determine if there is a conflict. In the event of a conflict, catch_warnings
will render the template at the views/<controller name>/<action>_conflict for the
requested format. If a template is not found it will fall back to the default
behaviour of redirect_to :back, setting flash[:warning] to "Your request will not be
processed because the data you were viewing is out of date. The page has been
refreshed. Please try again." For JS requests the message is displayed in an
alert box.

In the event of a conflict, catch_warning will block the action from happening
as defined in the controller


Accepted options:
:model - ActiveRecord model name that catch_warning will use to determine if
    there is a conflict. Default value is the taken from the controller name.
    Cannot be used with either :siumlate_conlfict argument.
    
:id - Record id used to determine if there is a conflict. Default value is
    params[options[:params_id_key]]. Cannot be used with either
    :siumlate_conlfict argument.
    
:params_id_key - params hash key containing the id to be used in conjunction
   with options[:model] an options[:column_name] to determine conflicts.

:column_name - column in model that catch_warnings uses to determine conflicts.
    Default will choose one of updated_at or updated_on. If the timestamp in the
    params hash is less than the value for this attribute in the instance found
    using model and id, then catch_warnings has found a conflict.
    
:time_stamp_key - params hash key containing the time the requesting page was
    rendered. Default value is :page_rendered_at
    
:template - template file to render in event of a conflict. Default is
    "#{controller_name}/#{action_name}_conflict" so a conflict triggered on a
    trades/confirm action will search for a confirm_conflict html.erb, .rhtml,
    or .rjs file depending on the request. If one isn't found the default action
    is taken.

:simulate_conflict_on_requests_before - instead of dynamically determining 
    a point in time to determine conflicts allows you to choose one. Treats all
    requests from pages rendered before this value as a conflict. Default value
    is nil. Useful for enforcing users follow recent application updates.

:simulate_conflict_on_requests_after - instead of dynamically determining
    a point in time to determine conflicts allows you to choose one. Treat all
    requests from pages rendered after this value as a conflict. Default value
    is nil. Useful for disabling portions of your application at a specified
    time.

:message - message to add to flash hash, default is "Your request will not be
    processed becasue the data you were viewing is out of date. The page has
    been refreshed. Please try again."
    
:flash_key - which key of the flash hash to save the message in. Default value
    is :warning

:except, :only - arguments to be passed to the underlying before_filter call

&block - If for some reason you want to write your own respond_to do |format|
    block the option is availble to you.

Example
=======

If show is rendered for a record by a user, and another user update's that same
record before the first user clicks the confirm link, catch_conflict will block
the confirm action form happening and seemlessly notify and update the first
user.


--views/sample/show.html.erb--
<div id="warnings">
</div>
<div id="static_content">
..
..
..
</div>
<div id="dynamic_content">
<=%render :partial => dynamic_content
</div>
..
..
link_to_remote_with_timestamp "Confirm", confirm_sample_path(@sample)

--controllers/sample_controller_rb--
class SampleController < ApplicationController
    catch_conflicts :only => confirm

    def confirm
        #not executed in a conflict
        ...
    end
    ...
end

--views/sample/confirm_conflict.rjs--
#updates relevant portions of page and highlights changes.
page.replace_html :warning, "We cannot complete your request at this time."
page.replace html :dynamic_content, render :partial => 'sample/dynamic_content'
page.visual_effect :highlight :dynamic_content, :duration => 5



Things To Do:
===========
*Handle additional formats beyond html and js
*Write test suite


Copyright (c) 2009 Emery Finkelstein, released under the MIT license
