= Conflict_Warnings

conflict_warnings is an ActionController extension that provides methods of
preventing data inconsistencies that could arise from multiple users interacting
with the same resource at roughly the same time. Named after the <b>HTTP 409
Conflict</b> status, conflict_warnings determines if a database conflict is
likely and intercepts potentailly dangerous requests.

= Installation

From the root of your rails project run the following command:

<tt>./script/plugin install git://github.com/EmFi/conflict_warnings.git</tt>

= Usage

Add either +filter_conflicts+ or +filter_resource_conflicts+ to your controllers
as if they were a before filter.

    class ExamplesController < ApplicationController
      filter_conflicts
    end

or

    class ExamplesController < ApplicationController
      filter_resources_conflicts :only => :update
    end

The underlying methods are also provided for use in your own filters, as
+catch_conflict+ and +catch_resource_conflict+.

    class CustomFilterExampleController < ApplicationController
      before_filter :check_lock

      protected
      def check_lock
        unless catch_resources_unavailable :accessor => :unlocked
          acquire_lock
        end
      end
    end

The ConflictWarnings methods will use the options supplied and the params to
select a model in the database and apply an accessor to identify problem requests.

By default the model associated with the controller handling the request is used,
will be used to find the instance with an id of params[:id].

+filter_conflicts+ and +catch_conflicts+ compare a timestamp passed in the link
against the updated_at column of the instance. Helpers are provided for creating
links with this timestamp. If the model was modified after the timestamp, the request
interrupted.

+filter_resources_unavialable+ and +catch_conflicts+ will check for an instance method
that ends with +available+. If this method returns 0 or a false value, the request
is interrupted.

Without any options interrupted requests redirect to the referring request, essentially
reloading the page and any changes.

= Documenation

This plugin comes with generated documentation for its provided methods and classes
in the doc folder.

In depth documentation of +filter_conflicts+ and +filter_resources_unavailable+ can
be found in +ConflictWarnings::ActionController::ClassMethods+. While documentation of
+catch_conflicts+ and +catch_resources_unavaialble+ can be found in
+ConflictWarnigns::ActionController::InstanceMethods+.

+conflict_warnings+ also provides some view helpers, for adding parameters
+catch_conflicts+ require to links. They can be found in
<tt>ConflictWarnings::ActionView::Helpers::UrlHelper</tt>
and <tt>ConflictWarnings::ActionView::Helpers::PrototypeHelper</tt>

= Caveats

If +catch_conflicts+, +catch_resource_conflict+, +filter_conflicts+ and
+filter_resource_conflicts+ not receive enough information to
reach a decision it will usually assumes the action is harmful. Records that produce
a nil value to compare the time the requesting page was rendered will be allowed
to complete successfully.







Things To Do:
===========
*Handle additional formats beyond html and js


Copyright (c) 2009 Emery Finkelstein, released under the MIT license
